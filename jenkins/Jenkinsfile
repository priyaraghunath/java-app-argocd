pipeline {
    agent {
        docker {
            image 'maven:3.9.4-eclipse-temurin-17'
            args '-v $HOME/.m2:/root/.m2 -v /var/run/docker.sock:/var/run/docker.sock'
            // Docker socket mounted so docker CLI works inside container
        }
    }

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO   = '682033504000.dkr.ecr.us-east-1.amazonaws.com/java-app'
        IMAGE_TAG  = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/priyaraghunath/java-app-argocd.git'
            }
        }

        stage('Build & Package') {
            steps {
                dir('spring-boot-app') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Test') {
            steps {
                dir('spring-boot-app') {
                    sh 'mvn test || true'
                    script {
                        def testReports = findFiles(glob: 'target/surefire-reports/*.xml')
                        if (testReports.length > 0) {
                            junit 'target/surefire-reports/*.xml'
                        } else {
                            echo 'No test reports found, skipping junit archive.'
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('spring-boot-app') {
                    withSonarQubeEnv('MySonar') {
                        // Pass sonar.login token if needed by Maven
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN'
                    }
                }
            }
        }

        stage('Docker Build and Push') {
            steps {
                dir('spring-boot-app') {
                    script {
                        def imageTag = "cupiemayo/myapp:${env.BUILD_NUMBER}"
                        sh "docker build -t ${imageTag} ."
                        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_CREDENTIALS_USR', passwordVariable: 'DOCKER_CREDENTIALS_PSW')]) {
                            sh "echo $DOCKER_CREDENTIALS_PSW | docker login -u $DOCKER_CREDENTIALS_USR --password-stdin"
                        }
                        sh "docker push ${imageTag}"
                        env.IMAGE_TAG = imageTag
                    }
                }
            }
        }

        stage('Update K8s Manifest & Push') {
            steps {
                script {
                    sh """
                    sed -i 's|image:.*|image: ${env.IMAGE_TAG}|' manifests/deployment.yaml
                    git config user.email "jenkins@example.com"
                    git config user.name  "Jenkins CI"
                    git add manifests/deployment.yaml
                    git commit -m "chore: bump image tag to ${env.IMAGE_TAG}"
                    git push origin main
                    """
                }
            }
        }
    }
}
