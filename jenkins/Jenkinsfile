pipeline {
    agent {
        docker {
            image 'maven:3.9.4-eclipse-temurin-17'
            args '-v $HOME/.m2:/root/.m2 -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO   = '682033504000.dkr.ecr.us-east-1.amazonaws.com/java-app'
        IMAGE_TAG  = "${BUILD_NUMBER}"
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        skipDefaultCheckout()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build & Package') {
            steps {
                dir('spring-boot-app') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Test') {
            steps {
                dir('spring-boot-app') {
                    sh 'mvn test || true'
                    script {
                        def testReports = findFiles(glob: 'target/surefire-reports/*.xml')
                        if (testReports.length > 0) {
                            junit 'target/surefire-reports/*.xml'
                        } else {
                            echo 'No test reports found, skipping junit archive.'
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SONAR_TOKEN = credentials('sonar-token')
            }
            steps {
                dir('spring-boot-app') {
                    withSonarQubeEnv('MySonar') {
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN'
                    }
                }
            }
        }

        stage('Docker Build & Push to ECR') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    withAWS(credentials: 'aws-credentials', region: "${AWS_REGION}") {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                            docker build -f docker/Dockerfile -t java-app:$IMAGE_TAG .
                            docker tag java-app:$IMAGE_TAG $ECR_REPO:$IMAGE_TAG
                            docker push $ECR_REPO:$IMAGE_TAG
                        '''
                    }
                }
            }
        }

        stage('Update K8s Manifest & Push') {
            steps {
                sh """
                    sed -i 's|image:.*|image: $ECR_REPO:$IMAGE_TAG|' manifests/deployment.yaml
                    git config user.email "jenkins@example.com"
                    git config user.name  "Jenkins CI"
                    git add manifests/deployment.yaml
                    git commit -m "chore: bump image tag to $IMAGE_TAG" || echo "No changes to commit"
                    git push origin main
                """
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
