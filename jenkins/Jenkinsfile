pipeline {
    agent {
        docker {
            image 'maven:3.9.4-eclipse-temurin-17'
            args '-v $HOME/.m2:/root/.m2 -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO   = '682033504000.dkr.ecr.us-east-1.amazonaws.com/java-app'
        IMAGE_TAG  = "${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/priyaraghunath/java-app-argocd.git'
            }
        }

        stage('Build & Package') {
            steps {
                dir('spring-boot-app') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Test') {
            steps {
                dir('spring-boot-app') {
                    sh 'mvn test || true'
                    script {
                        def testReports = findFiles(glob: 'target/surefire-reports/*.xml')
                        if (testReports.length > 0) {
                            junit 'target/surefire-reports/*.xml'
                        } else {
                            echo 'No test reports found, skipping junit archive.'
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SONAR_TOKEN = credentials('sonar-token')
            }
            steps {
                dir('spring-boot-app') {
                    withSonarQubeEnv('MySonar') {
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN'
                    }
                }
            }
        }

        stage('Docker Build & Push to ECR') {
            steps {
                dir('spring-boot-app') {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS'),
                                     string(credentialsId: 'aws-credentials', variable: 'AWS_SECRET_ACCESS_KEY'),
                                     string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID')]) {
                        sh '''
                            # Install AWS CLI if missing
                            if ! command -v aws &> /dev/null; then
                                echo "Installing AWS CLI..."
                                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                                unzip -oq awscliv2.zip
                                ./aws/install --update -i $HOME/.local/aws-cli -b $HOME/.local/bin
                            fi
                            export PATH="$HOME/.local/bin:$PATH"
                            aws --version

                            # Configure AWS credentials for CLI
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws configure set default.region $AWS_REGION

                            # Login to AWS ECR
                            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

                            # Build and push Docker image
                            docker build -t java-app:$IMAGE_TAG .
                            docker tag java-app:$IMAGE_TAG $ECR_REPO:$IMAGE_TAG
                            docker push $ECR_REPO:$IMAGE_TAG

                            # Logout docker from ECR
                            docker logout $ECR_REPO
                        '''
                    }
                }
            }
        }

        stage('Update K8s Manifest & Push') {
            steps {
                dir('manifests') {
                    script {
                        sh """
                            sed -i 's|image:.*|image: $ECR_REPO:$IMAGE_TAG|' deployment.yaml
                            git config user.email "jenkins@example.com"
                            git config user.name "Jenkins CI"
                            git add deployment.yaml
                            git commit -m "chore: bump image tag to $IMAGE_TAG"
                            git push origin main
                        """
                    }
                }
            }
        }
    }
}
